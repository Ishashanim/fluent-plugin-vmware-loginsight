# Fluentd plugin for VMware Log Insight
# 
# Copyright 2018 VMware, Inc. All Rights Reserved. 
# 
# This product is licensed to you under the MIT license (the "License").  You may not use this product except in compliance with the MIT License.  
# 
# This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file. 
# 
# SPDX-License-Identifier: MIT


<system>
  log_level info
</system>

# Prevent fluentd from handling records containing its own logs to handle cycles.
<match fluent.**>
  @type null
</match>

<source>
  @type systemd
  path /run/log/journal
  # Can filter logs if we want, e.g.
  #filters [{ "_SYSTEMD_UNIT": "kubelet.service" }]
  <storage>
    @type local
    persistent true
    path /var/log/fluentd-systemdlog.pos
  </storage>
  tag systemdlog
  read_from_head true
  strip_underscores true
</source>

<source>
  @type tail
  path /var/log/containers/*.log
  # One could exclude certain logs like:
  #  exclude_path ["/var/log/containers/log-collector*.log"]
  pos_file /var/log/fluentd-docker.pos
  time_format %Y-%m-%dT%H:%M:%S
  tag kubernetes.*
  format json
  read_from_head true
</source>


# Sample rule for services that generate java like stack trace
#<source>
#  @type tail
#  path /var/log/containers/javaapp**.log
#  pos_file /var/log/fluentd-dockerlog.pos
#  time_format %b %d %H:%M:%S
#  tag kubernetes.*
#  format multiline
#  format_firstline /\d{4}-\d{1,2}-\d{1,2}/
#  format1 /^(?<time>\d{4}-\d{1,2}-\d{1,2} \d{1,2}:\d{1,2}:\d{1,2}) \[(?<thread>.*)\] (?<level>[^\s]+)(?<message>.*)/
#  read_from_head true
#</source>

# Kubernetes metadata filter that tags additional meta data for each event
<filter kubernetes.var.log.containers.**.log>
  @type kubernetes_metadata
</filter>

# If we want to transform events we could use:
#<filter **>
#  @type record_transformer
#  enable_ruby
#  auto_typecast
#  <record>
#    hostname "#{Socket.gethostname}"
#    mykey ${["message"=>record.to_json]}
#  </record>
#</filter>

<match fluent.**>
  @type null
</match>

<match **>
  @type copy
  <store>
    @type vmware_loginsight
    scheme https
    ssl_verify true
#   Loginsight host: One may use IP address or cname
#   host X.X.X.X
    host my-loginsight.mycompany.com
    port 9000
    path api/v1/events/ingest
    agent_id XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
    http_method post
    serializer json
    rate_limit_msec 0
    raise_on_error false
    include_tag_key true
    tag_key tag
  </store>
# copy plugin supports sending/copying logs to multiple plugins
# One may choose to send them to multiple LIs
# Or one may want send a copy to stdout for debugging
#  <store>
#    @type stdout
#  </store>
</match>
